---

- set_fact:
    short_version: "{{ version.split('.')[:2] | join('.') }}"

- name: Check for user {{ user_name }}
  shell: dscl . read /Users/{{ user_name }}
  register: user_check
  failed_when: user_check.rc == -1

- name: Check for existing base image {{ zfs_pool }}/base-image/macos-homebrew-ocaml-{{ short_version }}
  shell: zfs list -H -o name {{ zfs_pool }}/base-image/macos-homebrew-ocaml-{{ short_version }}
  register: zfs_check
  failed_when: zfs_check.rc > 1

- name: Delete existing base image {{ zfs_pool }}/base-image/macos-homebrew-ocaml-{{ short_version }}
  shell: zfs destroy -R -r {{ zfs_pool }}/base-image/macos-homebrew-ocaml-{{ short_version }}
  when: zfs_check.rc == 0
  become: yes

- name: Unmount {{ homebrew_prefix }} if it is mounted
  become: yes
  mount:
    path: "{{ homebrew_prefix }}"
    state: unmounted

- name: Unmount /Users/{{ user_name }} if it is mounted
  become: yes
  mount:
    path: /Users/{{ user_name }}
    state: unmounted

- name: Remove any /Users/{{ user_name }}
  become: yes
  file:
    state: absent
    path: /Users/{{ user_name }}

- name: Delete user {{ user_name }} if it exists
  shell: dscl . -delete /Users/{{ user_name }}
  when: user_check.rc == 0
  become: yes

- name: Create user {{ user_name }}
  become: yes
  shell: |
    dscl . -create /Users/{{ user_name }}
    dscl . -create /Users/{{ user_name }} UniqueID 1000
    dscl . -create /Users/{{ user_name }} PrimaryGroupID 20
    dscl . -create /Users/{{ user_name }} UserShell /bin/bash
    dscl . -create /Users/{{ user_name }} NFSHomeDirectory /Users/{{ user_name }}
    dscl . -passwd /Users/{{ user_name }} ocaml
    dscl . -append /groups/admin GroupMembership {{ user_name }}

- name: Create sudo file for {{ user_name }}
  copy:
    dest: "/private/etc/sudoers.d/{{ user_name }}"
    content: |
      {{ user_name }} ALL=(ALL) NOPASSWD: ALL
  become: yes

- name: Create ZFS volume for {{ homebrew_prefix }}
  become: yes
  shell: zfs create -p -o mountpoint={{ homebrew_prefix }} {{ zfs_pool }}/base-image/macos-homebrew-ocaml-{{ short_version }}/brew

- name: Create ZFS volume for /Users/{{ user_name }}
  become: yes
  shell: zfs create -p -o mountpoint=/Users/{{ user_name }} {{ zfs_pool }}/base-image/macos-homebrew-ocaml-{{ short_version }}/home

- name: Check for existing cache folder {{ zfs_pool }}/cache/c-opam-archives
  shell: zfs list -H -o name {{ zfs_pool }}/cache/c-opam-archives
  register: zfs_check
  failed_when: zfs_check.rc > 1

- name: Create cache folder {{ zfs_pool }}/cache/c-opam-archives
  shell: zfs create -p -o mountpoint=/Users/{{ user_name }}/.opam/download-cache {{ zfs_pool }}/cache/c-opam-archives
  when: zfs_check.rc == 1
  become: yes

- name: Mount cache folder {{ zfs_pool }}/cache/c-opam-archives
  shell: zfs set mountpoint=/Users/{{ user_name }}/.opam/download-cache {{ zfs_pool }}/cache/c-opam-archives
  when: zfs_check.rc == 0
  become: yes

- name: Check for existing cache folder {{ zfs_pool }}/cache/c-homebrew
  shell: zfs list -H -o name {{ zfs_pool }}/cache/c-homebrew
  register: zfs_check
  failed_when: zfs_check.rc > 1

- name: Create cache folder {{ zfs_pool }}/cache/c-homebrew
  shell: zfs create -p -o mountpoint=/Users/{{ user_name }}/Library/Caches/Homebrew {{ zfs_pool }}/cache/c-homebrew
  when: zfs_check.rc == 1
  become: yes

- name: Mount cache folder {{ zfs_pool }}/cache/c-homebrew
  shell: zfs set mountpoint=/Users/{{ user_name }}/Library/Caches/Homebrew {{ zfs_pool }}/cache/c-homebrew
  when: zfs_check.rc == 0
  become: yes

- name: Run chown on /Users/{{ user_name }}
  become: yes
  shell: chown -R {{ user_name }}:admin /Users/{{ user_name }}

- name: Create setup script
  become: yes
  copy:
    dest: /Users/{{ user_name }}/macos-homebrew-ocaml.sh
    mode: u+rwx,g+rx,o+rx
    owner: "{{ user_name }}"
    group: admin
    content: |
      #!/bin/sh

      set -e

      if [[ $# -eq 0 ]] ; then
          echo 'Usage: $0 ocaml_version'
          exit 1
      fi

      # Required as the access to /tmp is forbidden
      export TMPDIR=$(getconf DARWIN_USER_TEMP_DIR)

      # Install Homebrew
      NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

      /usr/libexec/path_helper
      export homebrew=$(brew --prefix)

      # Opam requires GNU Patch
      brew install gpatch
      for i in $homebrew/Cellar/*/*/bin; do echo 'export PATH="'$i':$PATH' >> ~/.obuilder_profile.sh ; done

      # Download opam
      curl -s https://raw.githubusercontent.com/ocaml/opam/master/shell/install.sh -o install.sh
      chmod +x install.sh
      for version in 2.1.6 2.2.1 2.3.0 dev ; do
        if [ "$version" = "dev" ] ; then
          ./install.sh --dev --download-only
        else
          ./install.sh --version $version --download-only
        fi
        chmod a+x opam-*
        mv opam-* $homebrew/bin/opam-"${version%.*}"
      done
      rm install.sh

      # Default link 2.1 to opam
      ln $homebrew/bin/opam-2.1 $homebrew/bin/opam

      # Check opam version
      opam --version

      # Create the .obuilder_profile.sh
      echo 'export HOMEBREW_DISABLE_LOCKING=1' > ~/.obuilder_profile.sh
      echo 'export HOMEBREW_NO_AUTO_UPDATE=1' >> ~/.obuilder_profile.sh
      echo 'export PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin' >> ~/.obuilder_profile.sh
      echo 'export PATH=/opt/homebrew/bin:/opt/homebrew/sbin:$PATH' >> ~/.obuilder_profile.sh # /opt is used for homebrew on macOS/arm64
      echo 'export OPAMYES=1' >> ./.obuilder_profile.sh
      echo 'export OPAMCONFIRMLEVEL=unsafe-yes' >> ./.obuilder_profile.sh
      echo 'export OPAMERRLOGLEN=0' >> ./.obuilder_profile.sh
      echo 'export OPAMPRECISETRACKING=1' >> ./.obuilder_profile.sh

      # Clone opam-repo
      git clone https://github.com/ocaml/opam-repository.git

      # Create opam switch
      source ./.obuilder_profile.sh
      opam init -k git -a ./opam-repository -c $1 -y

      # Stop fseventsd monitoring these volumes
      for dir in $homebrew/.fseventsd ~/.fseventsd ~/.opam/download-cache/.fseventsd ~/Library/Caches/Homebrew/.fseventsd ; do
        echo "Remove $dir"
        sudo rm -r $dir
        sudo mkdir $dir
        sudo touch $dir/no_log
        sudo chown -R mac1000:admin $dir
      done

      # link local to $homebrew
      ln -s $homebrew local

- name: Test
  become: yes
  become_user: "{{ user_name }}"
  shell: ls -l {{ homebrew_prefix }}
  args:
    chdir: "/Users/{{ user_name }}"

- name: Run macos-homebrew-ocaml.sh script as user {{ user_name }} for {{ short_version }}
  become: yes
  become_user: "{{ user_name }}"
  shell: ./macos-homebrew-ocaml.sh {{ version }}
  args:
    chdir: "/Users/{{ user_name }}"
    creates: "/Users/{{ user_name }}/opam-repository"

- name: Relocation ZFS cache volume {{ zfs_pool }}/cache/c-homebrew
  become: yes
  shell: zfs inherit mountpoint {{ zfs_pool }}/cache/c-homebrew

- name: Relocation ZFS cache volume {{ zfs_pool }}/cache/c-opam-archives
  become: yes
  shell: zfs inherit mountpoint {{ zfs_pool }}/cache/c-opam-archives

- name: Unmount ZFS volume for {{ homebrew_prefix }}
  become: yes
  shell: zfs set mountpoint=none {{ zfs_pool }}/base-image/macos-homebrew-ocaml-{{ short_version }}/brew

- name: Set ownership on cache folders mount points
  become: yes
  file:
    path: "{{ item }}"
    owner: "{{ user_name }}"
    group: admin
  with_items:
    - /Users/{{ user_name }}/.opam/download-cache
    - /Users/{{ user_name }}/Library/Caches/Homebrew

- name: Unmount ZFS volume for /Users/{{ user_name }}
  become: yes
  shell: zfs set mountpoint=none {{ zfs_pool }}/base-image/macos-homebrew-ocaml-{{ short_version }}/home

- name: Create a snapshot of the base image
  become: yes
  shell: zfs snapshot -r {{ zfs_pool }}/base-image/macos-homebrew-ocaml-{{ short_version }}@snap

- name: Delete user {{ user_name }}
  become: yes
  shell: dscl . -delete /Users/{{ user_name }}

- name: Clone if it is the default
  when: default == true
  become: yes
  shell: |
    zfs clone -p {{ zfs_pool }}/base-image/macos-homebrew-ocaml-{{ short_version }}@snap {{ zfs_pool }}/base-image/macos-homebrew
    zfs clone -p {{ zfs_pool }}/base-image/macos-homebrew-ocaml-{{ short_version }}/home@snap {{ zfs_pool }}/base-image/macos-homebrew/home
    zfs clone -p {{ zfs_pool }}/base-image/macos-homebrew-ocaml-{{ short_version }}/brew@snap {{ zfs_pool }}/base-image/macos-homebrew/brew
    zfs snapshot -r {{ zfs_pool }}/base-image/macos-homebrew@snap

